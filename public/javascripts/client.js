// Generated by CoffeeScript 1.3.3
(function() {
  var Controller, Game, bind, hideConnectOptions, noGameScreen, onConnectClick, onLoad, onResize, showConnectOptions, unbind, _addPx, _id, _isAndroid, _remove,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game = (function() {

    Game._lastPosition = 0;

    function Game(ip, name, slider) {
      this.slider = slider;
      this.onTick = __bind(this.onTick, this);

      this.onMouseMove = __bind(this.onMouseMove, this);

      this.onTouchMove = __bind(this.onTouchMove, this);

      this.onTouchStart = __bind(this.onTouchStart, this);

      this.disconnect = __bind(this.disconnect, this);

      this.connected = __bind(this.connected, this);

      this.init = __bind(this.init, this);

      this.settings = {
        interval: 30
      };
      this.player = {
        name: name
      };
      this.socket = io.connect(ip);
      this.socket.on('connect', this.connected);
      this.socket.on('yourcolor', this.init);
      this.socket.on('nogamescreen', this.disconnect);
    }

    Game.prototype.setLastPosition = function(position) {
      return this._lastPosition = position;
    };

    Game.prototype.getLastPosition = function() {
      return this._lastPosition;
    };

    Game.prototype.init = function(controller) {
      this.controller = new Controller(this.slider, controller.color);
      document.addEventListener('touchstart', this.onTouchStart);
      document.addEventListener('touchmove', this.onTouchMove);
      document.addEventListener('mousemove', this.onMouseMove);
      return setInterval(this.onTick, this.settings.interval);
    };

    Game.prototype.connected = function() {
      return this.send('newplayer', this.player.name);
    };

    Game.prototype.disconnect = function(options) {
      return noGameScreen();
    };

    Game.prototype.onTouchStart = function(event) {
      if (_isAndroid()) {
        return event.preventDefault();
      }
    };

    Game.prototype.onTouchMove = function(event) {
      var x;
      event.preventDefault();
      if (_isAndroid()) {
        x = event.touches[0].pageX;
      } else {
        x = event.pageX;
      }
      return this.controller.setPosition(x);
    };

    Game.prototype.onMouseMove = function(event) {
      return this.controller.setPosition(event.pageX);
    };

    Game.prototype.onTick = function() {
      var position;
      position = this.controller.getPosition();
      if (position !== this.getLastPosition()) {
        this.send('position', position);
        return this.setLastPosition(position);
      }
    };

    Game.prototype.send = function(type, value) {
      return this.socket.emit(type, value);
    };

    return Game;

  })();

  Controller = (function() {

    Controller._color = '#FF0088';

    Controller._position = 0;

    function Controller(slider, color) {
      this.slider = slider;
      this.setColor(color);
    }

    Controller.prototype.getPosition = function() {
      return this._position;
    };

    Controller.prototype.setPosition = function(position) {
      var percentage;
      this._moveSlider(position);
      percentage = Math.round(position / document.body.clientWidth * 100);
      if (percentage > 100) {
        percentage = 100;
      }
      if (percentage < 0) {
        percentage = 0;
      }
      return this._position = percentage;
    };

    Controller.prototype._moveSlider = function(position) {
      return this.slider.style.left = _addPx(position);
    };

    Controller.prototype.getColor = function() {
      return this._color;
    };

    Controller.prototype.setColor = function(color) {
      this._color = color;
      return this._changeColor();
    };

    Controller.prototype._changeColor = function() {
      this.slider.style.backgroundColor = this.getColor();
      return this.slider.style.boxShadow = '0px 0px 10px 2px' + this.getColor();
    };

    return Controller;

  })();

  _id = function(id) {
    return document.getElementById(id);
  };

  _remove = function(id) {
    var element;
    return (element = _id(id)).parentNode.removeChild(element);
  };

  _isAndroid = function() {
    return navigator.userAgent.match(/Android/i);
  };

  _addPx = function(value) {
    return value + 'px';
  };

  onLoad = function() {
    window.optionsHolder = _id('options');
    window.connectButton = _id('connectButton');
    bind();
    return onResize();
  };

  bind = function() {
    return window.connectButton.addEventListener('click', onConnectClick);
  };

  unbind = function() {
    return window.connectButton.removeEventListener('click', onConnectClick);
  };

  onResize = function() {
    var center, middle;
    middle = _addPx((window.innerHeight / 2) - (window.optionsHolder.offsetHeight / 2) - (window.connectButton.offsetHeight - 20));
    center = _addPx((window.innerWidth / 2) - (window.optionsHolder.offsetWidth / 2));
    window.optionsHolder.style.top = middle;
    return window.optionsHolder.style.left = center;
  };

  hideConnectOptions = function() {
    return _id('connect').style.display = 'none';
  };

  showConnectOptions = function() {
    return _id('connect').style.display = 'block';
  };

  onConnectClick = function(event) {
    var ip, name, slider;
    event.preventDefault();
    unbind();
    ip = _id('ip').value;
    name = _id('nickname').value;
    if (ip.length > 0 && name.length > 0) {
      slider = _id('slider');
      try {
        window.game = new Game(ip, name, slider);
        return hideConnectOptions();
      } catch (error) {
        window.alert('Could not connect to the server: ' + ip);
        showConnectOptions();
        return bind();
      }
    }
  };

  noGameScreen = function() {
    window.alert('No gamescreen connected');
    return window.location.reload();
  };

  window.onload = onLoad;

  window.onresize = onResize;

}).call(this);
